import pandas as pd
from shapely.geometry import Point, Polygon
from pathlib import Path

# ── CONFIGURATION ──
CHUNK_SIZE = 500_000
IN_DIR     = Path('.')                       # current working directory
OUT_BASE   = IN_DIR / "norway_ports_filtered"
OUT_BASE.mkdir(exist_ok=True)

# ── DEFINE YOUR NORWAY PORT POLYGONS (lon, lat) ──
port_polygons = {
    "Bergen": Polygon([
        (5.3119966, 60.4048807),
        (5.2689096, 60.3941969),
        (5.3233262, 60.3710367),
        (5.3526803, 60.3832551),
        (5.3119966, 60.4048807),
    ]),
    "Stavanger": Polygon([
        (5.5596949, 58.9367236),
        (5.5461337, 58.9152819),
        (5.5955721, 58.9039355),
        (5.6122233, 58.9324718),
        (5.5596949, 58.9367236),
    ]),
    "Kristiansand": Polygon([
        (8.0021276, 58.157283),
        (7.9581823, 58.1337279),
        (8.0220403, 58.1192246),
        (8.0388631, 58.1449638),
        (8.0021276, 58.157283),
    ]),
    "Haugesund": Polygon([
        (5.2809529, 59.351359),
        (5.2675634, 59.3426946),
        (5.2979474, 59.3231697),
        (5.3307347, 59.3342031),
        (5.32095,   59.3522341),
        (5.2809529, 59.351359),
    ]),
    "Larvik": Polygon([
        (10.0060228, 59.0470095),
        (10.0200991, 59.0198933),
        (10.0786356, 59.03129),
        (10.0568346, 59.0541603),
        (10.0146059, 59.0497464),
        (10.0060228, 59.0470095),
    ]),
    "Moss": Polygon([
        (10.6414806, 59.4396391),
        (10.6102382, 59.4125713),
        (10.6557285, 59.4072425),
        (10.673238,  59.4375443),
        (10.6414806, 59.4396391),
    ]),
    "Drammen": Polygon([
        (10.2470522, 59.7538991),
        (10.1914339, 59.7347841),
        (10.2879076, 59.7134939),
        (10.3028421, 59.7476728),
        (10.2470522, 59.7538991),
    ]),
    "Oslo": Polygon([
        (10.7220254, 59.9127971),
        (10.6775651, 59.9016079),
        (10.7091508, 59.8693961),
        (10.7781586, 59.8841278),
        (10.7587609, 59.9135716),
        (10.7220254, 59.9127971),
    ]),
}

# ── PRECOMPUTE BOUNDING BOXES FOR FAST PREFILTER ──
port_bounds = {name: poly.bounds for name, poly in port_polygons.items()}

# ── SET UP OUTPUT WRITERS & SUMMARY COUNTERS ──
writers = {port: {"path": OUT_BASE/port/"all_data.csv", "first": True}
           for port in port_polygons}
summary = {port: 0 for port in port_polygons}

for port in writers:
    (OUT_BASE/port).mkdir(exist_ok=True)

# ── PROCESS EACH CSV IN CHUNKS ──
csv_files = sorted(Path('.').glob("*.csv"))
print(f"Starting spatial filter on {len(csv_files)} files…")

for src in csv_files:
    print(f" ▶ Reading {src.name}")
    for chunk in pd.read_csv(
        src,
        chunksize=CHUNK_SIZE,
        parse_dates=['date_time_utc'],
        low_memory=False
    ):
        # drop rows missing coords
        chunk = chunk.dropna(subset=["latitude", "longitude"])
        
        # for each port: bounding-box then polygon test
        for port, poly in port_polygons.items():
            minx, miny, maxx, maxy = port_bounds[port]
            bb_mask = (
                (chunk["longitude"] >= minx) &
                (chunk["longitude"] <= maxx) &
                (chunk["latitude"]  >= miny) &
                (chunk["latitude"]  <= maxy)
            )
            candidate = chunk[bb_mask]
            if candidate.empty:
                continue
            
            # precise geometry containment
            mask = candidate.apply(
                lambda r: poly.contains(Point(r["longitude"], r["latitude"])),
                axis=1
            )
            filtered = candidate[mask]
            if filtered.empty:
                continue
            
            # write out ALL columns for rows inside this port
            w = writers[port]
            if w["first"]:
                filtered.to_csv(w["path"], index=False, mode='w')
                w["first"] = False
            else:
                filtered.to_csv(w["path"], index=False, header=False, mode='a')
            
            summary[port] += len(filtered)
    
    print(f"   Done {src.name}")

# ── FINAL SUMMARY ──
print("\nRows retained per port:")
for port, cnt in summary.items():
    print(f" • {port}: {cnt:,} rows → {writers[port]['path']}")
